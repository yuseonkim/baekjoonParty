12장 템플릿

1. 함수 템플릿
1) 일반화 프로그래밍 : 일반적인 코드를 작성하고 다양한 타입의 객체에 대하여 재사용하는 프로그래밍 기법
 - 형식 : template<typename T>
 - 실제 함수는 함수를 호출하는 순간에 생성 : 함수 템플릿의 인스턴스화

2) 함수 템플릿의 특수화 : 특수한 매개변수에 대해서만 다른 동작
 - 문자열은 중복 정의 (함수의 템플릿보다 함수 중복의 우선순위가 더 높음)

3) 두개의 타입 매개변수를 갖는 함수 템플릿
 - 형식 : template<typename T1, typename T2>

2. 클래스 템플릿
 - 형식 : 
template <typename 타입이름 ... >
class 클래스이름
{ ... }

Box<int>   box1;
Box<char> box2;
Box<float> box3;

 - 클래스 외부에 멤버 함수를 정의하는 경우
 : 함수 템플릿처럼 함수 정의 앞에 template<typename ...> 써주어야 함
 - 두 개 이상의 타입 매개 변수를 가지는 경우
 - 디폴트 값 부여 : template <typename T = int>
 - 포인터나 참조자 정의 : Box<int> *pbox;
 - typedef문장 : typedef Box<int> iBox; iBox box;
 - 함수의 매개변수나 반환형으로도 사용
 - 텝플릿에서 생성된 클래스로부터 상속하는 것도 가능

 - 템플릿 사용의 장점
 : 템플릿으로부터 클래스 생정전 까지는 코드가 생성되지 않음
-> (STL 템플릿 기반의 라이브러리)확장성과 실행속도 면에서 우수

 - 클래스 템플릿과 프렌드
 : 타입 매개 변수를 사용하지 않는 프렌드 함수는 클래스 템플릿에서 생성된 
모든 클래스가 모두 사용할 수 있는 범용적인 프렌드!!
 : 만약 프렌드가 타입 매개변수를 사용 -> 특정한 타입의 클래스에만 속한다.

 - 정적 멤버
 : 모든 클래스에 대하여 하나만 존재하는 것은 아님, 특정 클래스에서 속하여 개별적으로 사용 가능
Test<int> obj1;
Test<double> obj2;
여기서 Test의 멤버 변수 count는 서로 다른 변수!


3. 스택 : 후입선출(Lifo)
 - 출력 순서가 입력 순서의 역순
