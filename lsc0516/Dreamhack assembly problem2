[Code]
main:
    push rbp 
    mov rbp, rsp
    mov esi, 0xf // esi = 0xf
    mov rdi, 0x400500 // rdi = 0x400500
    call 0x400497 < write_n > // write_n 함수 호출
    mov eax, 0x0 // eax = 0x0
    pop rbp
    ret

write_n :
    push rbp
    mov rbp, rsp // rsp = rbp
    mov QWORD PTR[rbp - 0x8], rdi // QWORD PTR [rbp - 0x8] = 0x400500
    mov DWORD PTR[rbp - 0xc], esi // DWORD PTR [rbp - 0xc] = 0xf
    xor rdx, rdx // rdx = 0
    mov edx, DWORD PTR[rbp - 0xc] // edx = DWORD PTR[rbp - 0xc] = 0xf
    mov rsi, QWORD PTR[rbp - 0x8] // rsi = QWORD PTR[rbp - 0x8] = 0x400500
    mov rdi, 0x1 // rdi = 0x1, stdout
    mov rax, 0x1 // rax = 0x1, wirte
    syscall // syscall(1, 0x400500, 0xf) -> 0x400500 ~ 0x40050f까지 출력
    pop rbp
    ret

==================================

[Memory]
0x400500 | 0x3037207964343372 0 7 space y d 4 3 r
0x400508 | 0x003f367562336420   ?   6   u b 3 d space

//x86-64는 리틀 엔디언이라 1바이트씩 뒤에서 앞으로 읽어줘야한다.
//r34dy 70 d3bu6? 이 답이 된다.
